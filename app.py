# bibIA/app.py

"""
Application principale de bibIA avec Streamlit.
"""

import streamlit as st
import asyncio
from typing import List, Dict, Any

# On importe le module de configuration pour pouvoir modifier ses variables dynamiquement
import src.config as config
from src.parser import split_bibliography, parse_entry
from src.verifier import verify_references

def initialize_state():
    """Initialise les variables dans le session_state de Streamlit."""
    if 'entries' not in st.session_state:
        st.session_state.entries = []
    if 'verification_results' not in st.session_state:
        st.session_state.verification_results = []

def display_results(results: List[Dict[str, Any]]):
    """Affiche les r√©sultats de la v√©rification de mani√®re riche et d√©taill√©e."""
    st.header("R√©sultats de la v√©rification")
    if not results:
        st.info("Aucun r√©sultat √† afficher.")
        return

    for i, result in enumerate(results):
        status = result.get('status', 'not_verifiable')
        with st.container(border=True):
            if status == 'found':
                st.success(f"**Entr√©e #{i+1} : TROUV√âE**", icon="‚úÖ")
            elif status == 'not_found':
                st.error(f"**Entr√©e #{i+1} : NON TROUV√âE**", icon="‚ùå")
            else:
                st.warning(f"**Entr√©e #{i+1} : V√âRIFICATION INCOMPL√àTE OU IMPOSSIBLE**", icon="‚ö†Ô∏è")
            
            st.markdown(f"> {result.get('original_text', '')}")
            with st.expander("Voir les d√©tails de l'analyse et de la v√©rification"):
                # ... (code d'affichage des d√©tails inchang√©) ...
                st.subheader("Donn√©es utilis√©es pour la v√©rification")
                parsed_data = {k: v for k, v in result.items() if k not in ['original_text', 'verification_details', 'status', 'found_in']}
                st.json(parsed_data)
                st.subheader("Journal de v√©rification par source")
                details = result.get('verification_details', [])
                if not details:
                    st.caption("Aucune source n'a pu √™tre interrog√©e.")
                else:
                    for source_result in details:
                        s_name = source_result.get('source')
                        s_status = source_result.get('status')
                        s_link = source_result.get('link')
                        s_details = source_result.get('details') or source_result.get('reason')
                        if s_status == 'found':
                            st.markdown(f"‚úîÔ∏è **{s_name} :** Trouv√© ! ‚Üí [Lien]({s_link})")
                        elif s_status == 'not_found':
                            st.markdown(f"‚ùå **{s_name} :** Non trouv√©.")
                        elif s_status == 'error':
                            st.markdown(f"‚ö†Ô∏è **{s_name} :** Erreur ({s_details})")
                        elif s_status == 'skipped':
                            st.markdown(f"‚è© **{s_name} :** Ignor√© ({s_details})")


async def main():
    """Fonction principale qui ex√©cute l'application Streamlit."""
    st.set_page_config(page_title="VerifBiblio", layout="wide", initial_sidebar_state="collapsed")
    
    initialize_state()

    st.title("bibIA : D√©tecteur de Bibliographie Hallucin√©e ü§ñ")
    st.markdown("Une application pour v√©rifier la validit√© de vos r√©f√©rences bibliographiques avec Google Scholar et crossref")

    st.info("‚ÑπÔ∏è **Mode d'emploi** : **1.** Collez votre bibliographie. **2.** Cliquez sur `Analyser`. **3.** Corrigez les √©l√©ments d√©tect√©s si besoin. **4.** Choisissez un d√©lai et cliquez sur `V√©rifier`.")

    raw_bibliography_input = st.text_area(
        label="**√âtape 1 : Collez votre bibliographie ici**",
        height=250,
        placeholder="Exemple :\n\nFoucault, M. (1975). Surveiller et punir : Naissance de la prison. Gallimard."
    )

    if st.button("Analyser la bibliographie", type="primary"):
        # ... (logique d'analyse inchang√©e) ...
        if not raw_bibliography_input.strip():
            st.warning("Le champ de la bibliographie est vide.")
        else:
            with st.spinner("Analyse et parsing des entr√©es..."):
                detected_entries = split_bibliography(raw_bibliography_input)
                st.session_state.entries = [parse_entry(entry) for entry in detected_entries]
                st.session_state.verification_results = []
            st.success(f"{len(st.session_state.entries)} entr√©es bibliographiques d√©tect√©es et pr√™tes pour la validation.")

    if st.session_state.entries:
        st.markdown("---")
        st.header("√âtape 2 & 3 : Validez les donn√©es et lancez la v√©rification")
        
        with st.form(key='correction_form'):
            for i, entry_data in enumerate(st.session_state.entries):
                with st.container(border=True):
                    # ... (formulaire de modification des entr√©es inchang√©) ...
                    st.markdown(f"**Entr√©e #{i+1}**")
                    st.text_area("Texte original", value=entry_data["original_text"], key=f"original_text_{i}", label_visibility="collapsed")
                    st.markdown("###### √âl√©ments d√©tect√©s (modifiables) :")
                    cols = st.columns(2)
                    entry_data['author'] = cols[0].text_input("Auteur(s)", value=entry_data.get('author'), key=f"author_{i}")
                    entry_data['year'] = cols[1].text_input("Ann√©e", value=entry_data.get('year'), key=f"year_{i}")
                    entry_data['title'] = st.text_input("Titre", value=entry_data.get('title'), key=f"title_{i}")
                    cols_journal = st.columns(3)
                    entry_data['journal'] = cols_journal[0].text_input("Revue/Journal", value=entry_data.get('journal'), key=f"journal_{i}")
                    entry_data['volume'] = cols_journal[1].text_input("Volume", value=entry_data.get('volume'), key=f"volume_{i}")
                    entry_data['pages'] = cols_journal[2].text_input("Pages", value=entry_data.get('pages'), key=f"pages_{i}")
                    entry_data['doi'] = st.text_input("DOI", value=entry_data.get('doi'), key=f"doi_{i}")
            
            st.markdown("---")
            
            # --- WIDGET DE S√âLECTION DU D√âLAI ---
            st.subheader("Options de la v√©rification")
            delay_option = st.radio(
                "Discr√©tion des requ√™tes (d√©lai entre chaque appel)",
                options=["Rapide", "Prudent (D√©faut)", "Tr√®s Prudent"],
                index=1, # "Prudent" est s√©lectionn√© par d√©faut
                captions=[
                    "1-3 secondes. Rapide mais plus risqu√© d'√™tre bloqu√© par Google.",
                    "10-20 secondes. Bon √©quilibre pour ne pas √™tre bloqu√©.",
                    "20-30 secondes. Tr√®s lent mais le plus s√ªr"
                ],
                horizontal=True,
            )

            submitted = st.form_submit_button(
                "V√©rifier toutes les r√©f√©rences", 
                type="primary", 
                use_container_width=True
            )

            if submitted:
                # --- LOGIQUE DE MISE √Ä JOUR DYNAMIQUE DU D√âLAI ---
                if delay_option == "Rapide":
                    config.RANDOM_DELAY_RANGE = (1.0, 3.0)
                elif delay_option == "Prudent (D√©faut)":
                    config.RANDOM_DELAY_RANGE = (10.0, 20.0)
                elif delay_option == "Tr√®s Prudent":
                    config.RANDOM_DELAY_RANGE = (20.0, 30.0)

                with st.spinner(f"V√©rification en cours avec un d√©lai de {delay_option}..."):
                    results = await verify_references(st.session_state.entries)
                    st.session_state.verification_results = results

    if st.session_state.verification_results:
        st.markdown("---")
        display_results(st.session_state.verification_results)

if __name__ == "__main__":
    asyncio.run(main())
